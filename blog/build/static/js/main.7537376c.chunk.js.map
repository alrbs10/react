{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","className","글제목","누른제목","날짜","App","useState","modal","modalChange","글제목변경","따봉","따봉변경","누른제목변경","입력값","입력값변경","map","글","i","onClick","a","goodArray","따봉바꾸기","onChange","e","target","value","새로운글제목","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,I,YCoEf,SAASA,EAAMC,GACb,OACE,sBAAKC,UAAU,QAAf,UACE,6BAAMD,EAAME,mBAAIF,EAAMG,4BACtB,kCAAKH,EAAMI,aAAGJ,EAAMG,0BAApB,OACA,6DAQSE,MA1Ef,WACE,MAA2BC,mBAAS,GAApC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAmBF,mBAAS,CAAC,oBAAW,aAAQ,YAAO,iBAAvD,mBAAKJ,EAAL,KAAUO,EAAV,KACA,EAAiBH,mBAAS,CAAC,+BAAW,+BAAW,gCAAY,kCAA7D,mBAAKF,EAAL,KACA,GADA,KACiBE,mBAAS,CAAC,EAAE,EAAE,EAAE,KAAjC,mBAAKI,EAAL,KAASC,EAAT,KACA,EAAqBL,mBAAS,GAA9B,mBAAKH,EAAL,KAAWS,EAAX,KACA,EAAmBN,mBAAS,IAA5B,mBAAKO,EAAL,KAAUC,EAAV,KAWA,OACE,sBAAKb,UAAU,MAAf,UACG,qBAAKA,UAAU,YAAf,SACE,uDAGAC,EAAIa,KAAI,SAASC,EAAGC,GAClB,OACE,sBAAKhB,UAAU,OAAf,UACH,qBAAIiB,QAAS,WAZnBN,EAY6BK,GAX7BT,EAAYD,EAAM,IAWZ,UAA8BS,EAAG,sBAAME,QAAU,YAlBzD,SAAeC,GACb,IAAIC,EAAS,YAAOV,GACpBU,EAAUD,IAAI,EACdR,EAAKS,GAeuDC,CAAMJ,IAA3B,0BAAjC,IAA6EP,EAAGO,MAChF,4BAAIb,EAAGa,KACP,yBAH8BA,MAYhCV,EAAM,IAAI,EACR,cAACR,EAAD,CAAO,qBAAKG,EAAK,2BAAMC,EAAM,eAAIC,IACjC,KAGJ,sBAAKH,UAAU,UAAf,UACE,uBAAOqB,SAAW,SAACC,GAAOT,EAAMS,EAAEC,OAAOC,UACzC,wBAAQP,QAAS,WACf,IAAIQ,EAAM,YAAOxB,GACjBwB,EAAOC,QAAQd,GACfJ,EAAMiB,IAHR,iCCvCOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7537376c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*eslint-disable */\n//노랑 워닝 안뜨게 하는 것\n\nimport React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  let [modal, modalChange] = useState(0);{/*스위치*/}\n  let [글제목, 글제목변경] = useState([\"HTML이란?\", 'CSS란?','JS란?','REACT란?']); //state는 변경되어도 새로고침되지 않음. 재렌더링됨.\n  let [날짜, 날짜변경] = useState([\"9월 1일 발행\",\"9월 8일 발행\",\"9월 15일 발행\",\"9월 22일 발행\"]);\n  let [따봉, 따봉변경] = useState([0,0,0,0]);\n  let [누른제목, 누른제목변경] = useState(0);\n  let [입력값, 입력값변경] = useState('');\n\n  function 따봉바꾸기(a){\n    var goodArray = [...따봉];\n    goodArray[a]+=1;\n    따봉변경(goodArray);\n  }\n  function 싹다변경(a){\n    누른제목변경(a);\n    modalChange(modal+1);\n  }\n  return (\n    <div className=\"App\">\n       <div className=\"black-nav\">\n         <div> 개발 Blog</div>\n       </div>\n       {\n         글제목.map(function(글, i){\n           return (\n             <div className=\"list\" key={i}>\n          <h3 onClick={()=>{싹다변경(i)}}>{ 글 }<span onClick={ ()=>{따봉바꾸기(i)} }>👍</span> {따봉[i]}</h3>\n          <p>{날짜[i]}</p>\n          <hr/>\n         </div>\n          )\n        })\n      }\n      \n      {/* <button onClick={()=>{modalChange(modal+1)}}>버튼</button> */}\n      \n      {\n        modal%2===1 \n        ? <Modal 글제목={글제목} 누른제목={누른제목} 날짜={날짜}></Modal> \n        : null\n      }\n      {/* 삼항연산자: {조건식 ? 참일 경우 실행되는 코드 : 거짓일 경우 실행되는 코드} */}\n      <div className=\"publish\">\n        <input onChange={ (e) => {입력값변경(e.target.value)}} />\n        <button onClick={()=>{\n          let 새로운글제목 = [...글제목];\n          새로운글제목.unshift(입력값);\n          글제목변경(새로운글제목)\n        }} >저장</button>\n      </div>\n    </div>\n  );\n}\n{/* component: html 줄이는 방법 \n유의사항: 1. 이름은 대괄호\n        2. return()안에 있는 건 태그 하나로 묶여있어야 함.(fragment: <> </>로 div 대체 가능)\n        3. functiona app도 하나의 컴포먼트, 새로 만드는 컴포먼트들은 app과 같은 위치에 놓기( 수평적인 관계 ).\n        4. 컴포먼트로 만들면 좋은 것: list처럼 반복되는 div class들. 자주 바뀌는 UI\n\n        5. 단, 너무 많이 만들면 state 쓸 때 복잡해짐. function 밖으로 나가게 되기 때문에 다시 가져다가 쓸 수 있음. ex. Modal에 글제목[0]이런 식으로 써줄 수 있음. props라는 문법을 이해해서 써야함.\n*/}\nfunction Modal(props){\n  return(\n    <div className=\"modal\">\n      <h2 >{props.글제목[props.누른제목]}</h2>\n      <p> {props.날짜[props.누른제목]} </p>\n      <p>상세 내용</p>\n    </div>\n  )\n}\n//props: 부모 컴퍼먼트의 state를 자식에게 전달하는 법. 부모 컴포넌트 안에 들어가이있는 태그에 name = {state} 이런식으로 작성\n//자식컴포넌트에서 props 파라미터 입력하면 거기에 정보 다 담기게 됨.\n//오브젝트 형식으로 props.state~ 이런식으로 씀\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}